name: build-publish-sherpaonnx-wasm

on:
  workflow_dispatch:
    inputs:
      sherpa_tag:
        description: "Tag/branch of k2-fsa/sherpa-onnx to build (default: latest tag)"
        required: false
        default: ""

jobs:
  build-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      ASSETS_REPO_TOKEN: ${{ secrets.ASSETS_REPO_TOKEN }}
    steps:
      - name: Resolve sherpa-onnx tag
        id: tag
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.sherpa_tag }}" ]; then
            echo "tag=${{ github.event.inputs.sherpa_tag }}" >> $GITHUB_OUTPUT
          else
            # Determine latest tag from upstream
            LATEST=$(git ls-remote --tags --sort="v:refname" https://github.com/k2-fsa/sherpa-onnx.git | awk -F/ '{print $3}' | tail -n1)
            if [ -z "$LATEST" ]; then
              echo "Failed to resolve latest tag" >&2
              exit 1
            fi
            echo "tag=$LATEST" >> $GITHUB_OUTPUT
          fi
          echo "Resolved sherpa-onnx tag written to GITHUB_OUTPUT"


      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Emscripten SDK
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 3.1.57

      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake ninja-build python3 wget tar bzip2

      - name: Clone sherpa-onnx
        run: |
          git clone https://github.com/k2-fsa/sherpa-onnx
          cd sherpa-onnx
          git checkout "${{ steps.tag.outputs.tag }}"

      - name: Patch CMake for loader-only build (no preloaded assets)
        run: |
          set -euo pipefail
          cd sherpa-onnx/wasm/tts
          CMAKE=CMakeLists.txt
          echo "Patching $CMAKE to remove asset preloading and fatal checks..."
          # 1) Downgrade any hard-stop messages to STATUS so configure continues
          sed -i 's/message(\s*FATAL_ERROR/message(STATUS/g' "$CMAKE" || true
          # 2) Remove the fatal check requiring assets/model.onnx (if present in if/endif block)
          awk 'BEGIN{skip=0} /if\(NOT EXISTS.*assets\/model\.onnx\)/{skip=1} skip && /endif\(\)/{skip=0; next} skip==1{next} {print}' "$CMAKE" > "$CMAKE.patched" && mv "$CMAKE.patched" "$CMAKE"
          # 3) Remove/prevent preloading of assets into .data
          sed -i 's/--preload-file[^\n]*assets@\. //g' "$CMAKE" || true
          sed -i 's/--preload-file[^\n]*assets[^\n]*//g' "$CMAKE" || true
          # 4) Do not install .data if it is not generated (robust matching)
          sed -i '/sherpa-onnx-wasm-main-tts\.data/d' "$CMAKE" || true
          sed -i '/\\.data[) ]/d' "$CMAKE" || true
          sed -i '/WASM.*DATA/d' "$CMAKE" || true
          # 5) Print first lines for debugging
          head -n 80 "$CMAKE" || true
          echo "Patch complete. Checking for remaining references:"
          grep -n "preload\|assets\/model\.onnx\|Please read\|\.data" "$CMAKE" || true

      - name: Build TTS WebAssembly
        run: |
          set -euo pipefail
          cd sherpa-onnx
          ./build-wasm-simd-tts.sh

      - name: Collect artifacts
        id: collect
        run: |
          set -euo pipefail
          mkdir -p out
          SRC=sherpa-onnx/build-wasm-simd-tts/install/bin/wasm/tts
          # Glue JS (try TTS-specific first)
          if [ -f "$SRC/sherpa-onnx-tts.js" ]; then
            cp "$SRC/sherpa-onnx-tts.js" out/
            GLUE="sherpa-onnx-tts.js"
          elif [ -f "$SRC/sherpa-onnx.js" ]; then
            cp "$SRC/sherpa-onnx.js" out/
            GLUE="sherpa-onnx.js"
          elif [ -f "$SRC/sherpaonnx.js" ]; then
            cp "$SRC/sherpaonnx.js" out/
            GLUE="sherpaonnx.js"
          else
            echo "Glue JS not found in $SRC" >&2
            ls -la "$SRC" || true
            exit 1
          fi
          echo "glue=$GLUE" >> $GITHUB_OUTPUT

          # Main runtime JS
          if [ -f "$SRC/sherpa-onnx-wasm-main-tts.js" ]; then
            cp "$SRC/sherpa-onnx-wasm-main-tts.js" out/
          elif [ -f "$SRC/sherpa-onnx-wasm-main.js" ]; then
            cp "$SRC/sherpa-onnx-wasm-main.js" out/
          fi

          # WASM binary
          if [ -f "$SRC/sherpa-onnx-wasm-main-tts.wasm" ]; then
            cp "$SRC/sherpa-onnx-wasm-main-tts.wasm" out/
          elif [ -f "$SRC/sherpa-onnx-wasm-main.wasm" ]; then
            cp "$SRC/sherpa-onnx-wasm-main.wasm" out/
          else
            echo ".wasm not found in $SRC" >&2
            ls -la "$SRC" || true
            exit 1
          fi

          # Data file (optional but expected in upstream)
          if [ -f "$SRC/sherpa-onnx-wasm-main-tts.data" ]; then
            cp "$SRC/sherpa-onnx-wasm-main-tts.data" out/
          elif [ -f "$SRC/sherpa-onnx-wasm-main.data" ]; then
            cp "$SRC/sherpa-onnx-wasm-main.data" out/
          fi

          cp sherpa-onnx/LICENSE out/SHERPAONNX-LICENSE
          # Include models index JSON for browsers
          cp src/engines/sherpaonnx/merged_models.json out/merged_models.json

      - name: Upload workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: sherpaonnx-tts-wasm-${{ steps.tag.outputs.tag }}
          path: out

      - name: Publish to js-tts-wrapper-assets repo (jsDelivr-friendly)
        if: ${{ env.ASSETS_REPO_TOKEN != '' }}
        env:
          GH_TOKEN: ${{ env.ASSETS_REPO_TOKEN }}
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          rm -rf assets-repo
          git clone https://x-access-token:${GH_TOKEN}@github.com/willwade/js-tts-wrapper-assets.git assets-repo

          mkdir -p assets-repo/sherpaonnx/tts/${{ steps.tag.outputs.tag }}
          cp -r out/* assets-repo/sherpaonnx/tts/${{ steps.tag.outputs.tag }}/

          # Also publish a canonical models index (latest)
          mkdir -p assets-repo/sherpaonnx/models
          cp src/engines/sherpaonnx/merged_models.json assets-repo/sherpaonnx/models/merged_models.json

          cd assets-repo
          git add -A
          git commit -m "feat: add sherpa-onnx TTS WASM for ${{ steps.tag.outputs.tag }} and merged_models.json (snapshot + canonical)"
          git push

      - name: Print base URLs
        run: |
          echo "If published to assets repo, use these URLs:"
          echo "  WASM base:  https://cdn.jsdelivr.net/gh/willwade/js-tts-wrapper-assets@main/sherpaonnx/tts/${{ steps.tag.outputs.tag }}"
          GLUE=${{ steps.collect.outputs.glue }}
          if [ -z "$GLUE" ]; then GLUE="sherpa-onnx-tts.js"; fi
          echo "  wasmPath:   https://cdn.jsdelivr.net/gh/willwade/js-tts-wrapper-assets@main/sherpaonnx/tts/${{ steps.tag.outputs.tag }}/$GLUE"
          echo "  Models (snapshot for this tag):"
          echo "              https://cdn.jsdelivr.net/gh/willwade/js-tts-wrapper-assets@main/sherpaonnx/tts/${{ steps.tag.outputs.tag }}/merged_models.json"
          echo "  Models (canonical latest):"
          echo "              https://cdn.jsdelivr.net/gh/willwade/js-tts-wrapper-assets@main/sherpaonnx/models/merged_models.json"

