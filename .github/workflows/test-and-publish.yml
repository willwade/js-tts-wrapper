name: Test and Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    # Install peer dependencies for build
    - name: Install peer dependencies
      run: |
        # Install AWS Polly first to ensure TypeScript can find it during build
        npm install @aws-sdk/client-polly@^3.782.0 --save-dev
        # Install other peer dependencies
        npm install @azure/cognitiveservices-speechservices@^1.0.0
        npm install @google-cloud/text-to-speech@^6.0.1
        npm install decompress@^4.2.1
        npm install decompress-bzip2@^4.0.0
        npm install decompress-tarbz2@^4.1.1
        npm install decompress-targz@^4.1.1
        npm install microsoft-cognitiveservices-speech-sdk@^1.43.1
        npm install node-fetch@^2.0.0
        npm install openai@^4.93.0
        npm install tar-stream@^3.1.7
        # Skip sherpa-onnx-node as it's platform-specific
    - run: npm run build
    - run: npm run lint
    - run: npm test
    # Run TTS tests if credentials are available
    - name: Check Azure credentials
      id: check_azure
      run: |
        if [ -n "${{ secrets.MICROSOFT_TOKEN }}" ] && [ -n "${{ secrets.MICROSOFT_REGION }}" ]; then
          echo "has_creds=true" >> $GITHUB_OUTPUT
        else
          echo "has_creds=false" >> $GITHUB_OUTPUT
        fi
    - name: Run Azure TTS tests
      if: steps.check_azure.outputs.has_creds == 'true'
      run: npm run test:azure
      env:
        MICROSOFT_TOKEN: ${{ secrets.MICROSOFT_TOKEN }}
        MICROSOFT_REGION: ${{ secrets.MICROSOFT_REGION }}

    - name: Check ElevenLabs credentials
      id: check_elevenlabs
      run: |
        if [ -n "${{ secrets.ELEVENLABS_API_KEY }}" ]; then
          echo "has_creds=true" >> $GITHUB_OUTPUT
        else
          echo "has_creds=false" >> $GITHUB_OUTPUT
        fi
    - name: Run ElevenLabs tests
      if: steps.check_elevenlabs.outputs.has_creds == 'true'
      run: npm run test:elevenlabs
      env:
        ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}

    - name: Check Google credentials
      id: check_google
      run: |
        if [ -n "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" ]; then
          echo "has_creds=true" >> $GITHUB_OUTPUT
        else
          echo "has_creds=false" >> $GITHUB_OUTPUT
        fi
    - name: Run Google tests
      if: steps.check_google.outputs.has_creds == 'true'
      run: |
        echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" > google-sa-key.json
        export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/google-sa-key.json
        npm run test:google
        rm google-sa-key.json

  publish:
    needs: test
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
    - run: npm ci
    # Install peer dependencies for build
    - name: Install peer dependencies
      run: |
        # Install AWS Polly first to ensure TypeScript can find it during build
        npm install @aws-sdk/client-polly@^3.782.0 --save-dev
        # Install other peer dependencies
        npm install @azure/cognitiveservices-speechservices@^1.0.0
        npm install @google-cloud/text-to-speech@^6.0.1
        npm install decompress@^4.2.1
        npm install decompress-bzip2@^4.0.0
        npm install decompress-tarbz2@^4.1.1
        npm install decompress-targz@^4.1.1
        npm install microsoft-cognitiveservices-speech-sdk@^1.43.1
        npm install node-fetch@^2.0.0
        npm install openai@^4.93.0
        npm install tar-stream@^3.1.7
        # Skip sherpa-onnx-node as it's platform-specific
    - run: npm run prepublishOnly
    - name: Publish to npm
      run: |
        cd dist
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
