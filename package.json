{
  "name": "js-tts-wrapper",
  "version": "0.1.6",
  "description": "A JavaScript/TypeScript library that provides a unified API for working with multiple cloud-based Text-to-Speech (TTS) services",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "browser": "dist/browser.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist/cjs",
    "dist/esm",
    "dist/browser.js",
    "dist/index.d.ts"
  ],
  "exports": {
    ".": {
      "require": "./dist/cjs/index.js",
      "import": "./dist/esm/index.js",
      "browser": "./dist/browser.js"
    },
    "./browser": {
      "require": "./dist/browser.js",
      "import": "./dist/browser.js"
    }
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/willwade/js-tts-wrapper.git"
  },
  "author": "Will Wade <willwade@gmail.com>",
  "license": "MIT",
  "type": "module",
  "scripts": {
    "build": "npm run build:cjs && npm run build:esm && npm run build:browser",
    "build:cjs": "node scripts/generate-models-ts.cjs && tsc -p tsconfig.cjs.json",
    "build:esm": "node scripts/generate-models-ts.cjs && tsc -p tsconfig.esm.json && tsc-alias -p tsconfig.esm.json && tsc-esm-fix dist/esm",
    "build:browser": "tsc -p tsconfig.browser.json",
    "build:bundle": "rollup -c rollup.config.js",
    "dev": "tsc --watch",
    "test": "NODE_OPTIONS=--experimental-vm-modules jest",
    "test:env": "node load-env.js && jest",
    "test:tts": "node run-tts-tests.cjs",
    "test:azure": "node run-tts-tests.cjs azure",
    "test:elevenlabs": "node run-tts-tests.cjs elevenlabs",
    "test:google": "node run-tts-tests.cjs google",
    "test:polly": "node run-tts-tests.cjs polly",
    "test:openai": "node run-tts-tests.cjs openai",
    "test:playht": "node run-tts-tests.cjs playht",
    "test:sherpaonnx": "node run-tts-tests.cjs sherpaonnx",
    "test:sherpaonnx:mac": "node scripts/run-with-sherpaonnx.js run-tts-tests.js sherpaonnx",
    "test:sherpaonnx-wasm": "node run-tts-tests.cjs sherpaonnx-wasm",
    "example": "node examples/tts-example.js",
    "example:azure": "node examples/tts-example.js azure",
    "example:elevenlabs": "node examples/tts-example.js elevenlabs",
    "example:google": "node examples/tts-example.js google",
    "example:polly": "node examples/tts-example.js polly",
    "example:sherpaonnx": "node examples/tts-example.js sherpaonnx",
    "example:sherpaonnx:mac": "node scripts/run-with-sherpaonnx.js examples/tts-example.js sherpaonnx",
    "example:sherpaonnx-wasm": "node examples/tts-example.js sherpaonnx-wasm",
    "example:openai": "node examples/tts-example.js openai",
    "example:playht": "node examples/tts-example.js playht",
    "lint": "biome lint --log-level=error ./src/utils ./src/ssml ./src/markdown",
    "lint:fix": "biome lint --write ./src/utils ./src/ssml ./src/markdown",
    "format": "biome format --write ./src/utils ./src/ssml ./src/markdown",
    "check": "biome check --write ./src/utils ./src/ssml ./src/markdown",
    "fix:all": "node scripts/fix-lint.js",
    "clean": "rimraf dist",
    "prepublishOnly": "npm run clean && npm run build && node scripts/package.js",
    "prepare-package": "node scripts/package.js",
    "prepare": "husky",
    "pre-push": "npm run check",
    "install:deps": "echo 'Use npm install js-tts-wrapper[engine] instead. For example: npm install js-tts-wrapper[azure]'",
    "install:all-dev": "npm install openai @google-cloud/text-to-speech @azure/cognitiveservices-speechservices microsoft-cognitiveservices-speech-sdk @aws-sdk/client-polly node-fetch@2 sherpa-onnx-node decompress decompress-bzip2 decompress-tarbz2 decompress-targz tar-stream"
  },
  "keywords": [
    "tts",
    "text-to-speech",
    "azure",
    "google",
    "polly",
    "elevenlabs",
    "ibm",
    "watson",
    "openai",
    "sherpaonnx",
    "webassembly",
    "wasm",
    "offline-tts",
    "espeak"
  ],
  "devDependencies": {
    "@biomejs/biome": "^1.9.4",
    "@rollup/plugin-commonjs": "^28.0.3",
    "@rollup/plugin-json": "^6.1.0",
    "@rollup/plugin-node-resolve": "^16.0.1",
    "@rollup/plugin-terser": "^0.4.4",
    "@rollup/plugin-typescript": "^12.1.2",
    "@types/jest": "^29.5.14",
    "@types/mock-fs": "^4.13.4",
    "@types/node-fetch": "^2.6.12",
    "dotenv": "^16.4.7",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "lint-staged": "^15.5.0",
    "mock-fs": "^5.5.0",
    "rimraf": "^6.0.1",
    "rollup": "^4.39.0",
    "sinon": "^20.0.0",
    "speechmarkdown-js": "^2.1.0",
    "ts-jest": "^29.3.2",
    "tsc-alias": "^1.8.15",
    "tsc-esm-fix": "^3.1.2",
    "tslib": "^2.8.1",
    "typescript": "^5.8.3",
    "ws": "^8.17.1"
  },
  "peerDependencies": {
    "@aws-sdk/client-polly": "^3.799.0",
    "@azure/cognitiveservices-speechservices": "^1.0.0",
    "@google-cloud/text-to-speech": "^6.0.1",
    "decompress": "^4.2.1",
    "decompress-bzip2": "^4.0.0",
    "decompress-tarbz2": "^4.1.1",
    "decompress-targz": "^4.1.1",
    "microsoft-cognitiveservices-speech-sdk": "^1.43.1",
    "openai": "^4.97.0",
    "sherpa-onnx-node": "^1.11.3",
    "tar-stream": "^3.1.7"
  },
  "peerDependenciesMeta": {
    "@aws-sdk/client-polly": {
      "optional": true
    },
    "@azure/cognitiveservices-speechservices": {
      "optional": true
    },
    "@google-cloud/text-to-speech": {
      "optional": true
    },
    "decompress": {
      "optional": true
    },
    "decompress-bzip2": {
      "optional": true
    },
    "decompress-tarbz2": {
      "optional": true
    },
    "decompress-targz": {
      "optional": true
    },
    "microsoft-cognitiveservices-speech-sdk": {
      "optional": true
    },
    "openai": {
      "optional": true
    },
    "sherpa-onnx-node": {
      "optional": true
    },
    "tar-stream": {
      "optional": true
    }
  },
  "optionalDependencies": {
  },
  "dependencyGroups": {
    "azure": {
      "microsoft-cognitiveservices-speech-sdk": "^1.43.1",
      "@azure/cognitiveservices-speechservices": "^1.0.0"
    },
    "google": {
      "@google-cloud/text-to-speech": "^6.0.1"
    },
    "elevenlabs": {
      "node-fetch": "^2.0.0"
    },
    "playht": {
      "node-fetch": "^2.0.0"
    },
    "polly": {
      "@aws-sdk/client-polly": "^3.782.0"
    },
    "openai": {
      "openai": "^4.93.0"
    },
    "sherpaonnx": {
      "sherpa-onnx-node": "^1.11.3",
      "decompress": "^4.2.1",
      "decompress-bzip2": "^4.0.0",
      "decompress-tarbz2": "^4.1.1",
      "decompress-targz": "^4.1.1",
      "tar-stream": "^3.1.7"
    },
    "cloud": {
      "microsoft-cognitiveservices-speech-sdk": "^1.43.1",
      "@azure/cognitiveservices-speechservices": "^1.0.0",
      "@google-cloud/text-to-speech": "^6.0.1",
      "@aws-sdk/client-polly": "^3.782.0",
      "openai": "^4.93.0"
    },
    "all": {
      "microsoft-cognitiveservices-speech-sdk": "^1.43.1",
      "@azure/cognitiveservices-speechservices": "^1.0.0",
      "@google-cloud/text-to-speech": "^6.0.1",
      "@aws-sdk/client-polly": "^3.782.0",
      "openai": "^4.93.0",
      "node-fetch": "^2.0.0",
      "sherpa-onnx-node": "^1.11.3",
      "decompress": "^4.2.1",
      "decompress-bzip2": "^4.0.0",
      "decompress-tarbz2": "^4.1.1",
      "decompress-targz": "^4.1.1",
      "tar-stream": "^3.1.7"
    }
  },
  "lint-staged": {
    "./src/utils/**/*.{js,ts}": [
      "biome lint --write",
      "biome format --write"
    ],
    "./src/ssml/**/*.{js,ts}": [
      "biome lint --write",
      "biome format --write"
    ],
    "./src/markdown/**/*.{js,ts}": [
      "biome lint --write",
      "biome format --write"
    ]
  },
  "dependencies": {
    "@google-cloud/text-to-speech": "^6.0.1",
    "@local/espeakng": "file:./wasm/espeakng",
    "aws-sdk": "^2.1638.0",
    "elevenlabs": "^0.6.0",
    "openai": "^4.97.0",
    "sherpa-onnx-node": "^1.11.3"
  }
}
